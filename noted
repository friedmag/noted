#!/bin/bash

set -eo pipefail

#
# START FUNCTIONS (alphabetical order)
#

append() {
  markdownFile "${currDate}"
  useText="- $*"
  # Usage: insert_above_marker "$headerText" "$END_TEXT" "$file"
  awk -v insert="$useText" -v marker="$END_TEXT" '
    {
      lines[NR] = $0
    }
    END {
      for (i = 1; i <= NR; ++i) {
        # If 1 line ahead is the marker, insert before printing this line
        if ((i+1) <= NR && lines[i+1] == marker) {
          print insert
        }
        print lines[i]
      }
    }
  ' "${markdownFile}" > "${markdownFile}.tmp"
  mv "${markdownFile}.tmp" "${markdownFile}"
}

create() {
  newEntry() {
    headerText="$@"
    result="${TEMPLATE_TEXT}"
    result="${result/HEADERTEXT/$headerText}"
    result="${result/TIMESTAMP/$timestamp}"
    echo -e "\n$result\n"
  }
  TEMPLATE_TEXT=""
  if [ -f "${NOTED_TEMPLATE_FILE}" ]; then
    # use template file
    TEMPLATE_TEXT=$(<"${NOTED_TEMPLATE_FILE}")
  else
    read -r -d '' TEMPLATE_TEXT <<EOF || true
---
TIMESTAMP

# HEADERTEXT


$END_TEXT

---
EOF
  fi
  mkdir -p "${NOTED_MARKDOWN_HOME}"
  markdownFile "${currDate}"
  if [[ -n "${OPTIONAL_FILE}" ]]; then
    markdownFile="${NOTED_MARKDOWN_HOME}/${OPTIONAL_FILE}"
  fi
  touch "${markdownFile}"
  grep -Fv "${END_TEXT}" "${markdownFile}" >"${markdownFile}.tmp" || true
  newEntry "${OPTIONAL_NOTE}" >>"${markdownFile}.tmp"
  mv "${markdownFile}.tmp" "${markdownFile}"
  if [ -z "${OPTIONAL_NOTE}" ]; then
    # If the note was empty, open the file for editing
    edit "${markdownFile}"
  fi
}

edit() {
  if which open &>/dev/null && [ "$NOTED_DISABLE_OPEN" != "true" ]; then
    open "${markdownFile}"
  elif [ -n "$VISUAL" ] && [ "$1" != "skip-visual" ]; then
    $VISUAL "${markdownFile}"
  elif [ -n "$EDITOR" ]; then
    $EDITOR "${markdownFile}"
  else
    echo "No editor found. Please set the EDITOR environment variable."
    exit 1
  fi
}

edit2() {
  edit "skip-visual"
}

help() {
  version
}

loadProperties() {
  if [[ -f "${NOTED_CONFIG_FILE}" ]]; then
    source "${NOTED_CONFIG_FILE}"
  fi
}

markdownFile() {
  markdownFile="${NOTED_MARKDOWN_HOME}/${1}.md"
}

ngrep() {
  grep --recursive "$@" "${NOTED_MARKDOWN_HOME}"
}

outputConfig() {
  echo "The following configuration is currently being used:"
  echo "NOTED_MARKDOWN_HOME=${NOTED_MARKDOWN_HOME}"
  echo "NOTED_FILE_NAME_DATE_FORMAT=${NOTED_FILE_NAME_DATE_FORMAT}"
  echo "NOTED_TIMESTAMP_FORMAT=${NOTED_TIMESTAMP_FORMAT}"
  echo "NOTED_TEMPLATE_FILE=${NOTED_TEMPLATE_FILE:-<<DEFAULT>>}"
  echo "NOTED_TODO_MARKER=${NOTED_TODO_MARKER}"
  echo "NOTED_MULTIARG_MODE=${NOTED_MULTIARG_MODE}"
  echo
  echo "These values can be set in: ${NOTED_CONFIG_FILE}"
}

validate() {
  if [ -z "$1" ]; then
    echo "${2}"
    exit 1
  fi
}

version() {
  echo "noted v${VERSION}"
}

view() {
  open "${htmlFile}"
}

#
# END FUNCTIONS
#

VERSION="0.0.3"

# Placeholder for the end of the last entry
END_TEXT="[//]: # (end)"

#
# Default Settings
#
# Location of config file
[ -n "$NOTED_CONFIG_FILE" ] || NOTED_CONFIG_FILE=$HOME/.notedconfig

# Settings that can be overridden from properties
# name files like this
NOTED_FILE_NAME_DATE_FORMAT="+%Y-%m-%d"
# timestamp entries within the files like this
NOTED_TIMESTAMP_FORMAT="+%H:%M:%S %Z"
NOTED_TEMPLATE_FILE=""
# keep the directory where notes are stored here
NOTED_MARKDOWN_HOME=$HOME/Documents/notes
NOTED_TODO_MARKER="TODO"
# Treat multiple arguments as a single message (disables specifying a file)
NOTED_MULTIARG_MODE="false"

#
# Override with any additional settings
#
loadProperties

currDate=$(date "${NOTED_FILE_NAME_DATE_FORMAT}")
timestamp=$(date "${NOTED_TIMESTAMP_FORMAT}")

todaysFile="${NOTED_MARKDOWN_HOME}/${currDate}.md"

subcommand="$1"; shift || true
if  [[ "${subcommand}" == "config" ]]; then
  outputConfig
elif [[ "${subcommand}" == "version" ]]; then
  version
elif [[ "${subcommand}" == "help" ]]; then
  help
elif [[ "${subcommand}" == "edit" ]] || [[ "${subcommand}" == "edit2" ]] || [[ "${subcommand}" == "view" ]]; then
  arg="$1"; shift || true
  if [[ -z "${arg}" ]]; then
    arg="${currDate}"
  fi
  markdownFile "${arg}"
  $subcommand
elif [[ "${subcommand}" == "grep" ]]; then
  ngrep "$@"
elif [[ "${subcommand}" == 'todos' ]]; then
  fgrep -rH "${NOTED_TODO_MARKER}" "${NOTED_MARKDOWN_HOME}" | fgrep -v ~~
  if [ 1 == $? ]; then echo "Congratulations! No TODOs found!"; fi
  echo
else
  case "${subcommand}" in
    "edit-config" )
      markdownFile="${NOTED_CONFIG_FILE}"
      edit
      ;;
    "edit2-config" )
      markdownFile="${NOTED_CONFIG_FILE}"
      edit2
      ;;
    "append" )
      append "$@"
      ;;
    "append-at" )
      append "**$timestamp**" "$@"
      ;;
    "gl-todo" | "glt" )
      if [ -z "$GITLAB_TOKEN" -o -z "$GITLAB_API_URL" -o -z "$NOTED_GITLAB_ISSUE_PROJECT_ID" ]; then
        echo "GitLab variables missing:"
        echo -e "\tGITLAB_TOKEN=$GITLAB_TOKEN"
        echo -e "\tGITLAB_API_URL=$GITLAB_API_URL"
        echo -e "\tNOTED_GITLAB_ISSUE_PROJECT_ID=$NOTED_GITLAB_ISSUE_PROJECT_ID"
        echo "Please set all of these to create TODOs."
        echo
        echo "Also optionally set:"
        echo -e "\tNOTED_GITLAB_ISSUE_LABELS=$NOTED_GITLAB_ISSUE_LABELS"
        echo -e "\tNOTED_GITLAB_ISSUE_PREFIX=$NOTED_GITLAB_ISSUE_PREFIX"
        exit 1
      fi

      if [ -z "$*" ]; then
        echo "Please provide a title for the TODO."
        exit 1
      fi

      echo "Creating GitLab TODO"
      title="$*"
      if [ -n "$NOTED_GITLAB_ISSUE_PREFIX" ]; then
        title="$NOTED_GITLAB_ISSUE_PREFIX$title"
      fi
      curl -sf --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
           --header "Content-Type: application/json" \
           --request POST \
           --data '{"title": "'"$title"'", "labels": "'"$NOTED_GITLAB_ISSUE_LABELS"'"}' \
           "$GITLAB_API_URL/projects/$NOTED_GITLAB_ISSUE_PROJECT_ID/issues" >temp.json

      if which jq &>/dev/null; then
        url="$(jq -r '.web_url' temp.json)"
        echo "GitLab TODO created. URL: $url"
      else
        echo "GitLab TODO created. jq not installed, so not printing URL. See raw data:"
        cat temp.json
      fi
      rm -f temp.json
      ;;
    *)
      # create / default
      OPTIONAL_FILE=""
      OPTIONAL_NOTE=""
      # Allow specifying create explicitly
      if [[ "${subcommand}" != "create" ]]; then
        OPTIONAL_NOTE="${subcommand}"
      fi
      if [ "${NOTED_MULTIARG_MODE}" == "true" ]; then
        # Treat multiple arguments as a single message (disables specifying a file)
        if [[ -n "$1" ]]; then
          OPTIONAL_NOTE="$OPTIONAL_NOTE $*"
        fi
      else
        # Enable specifying a file
        OPTIONAL_FILE="$1"
      fi
      create "${OPTIONAL_NOTE}" "${OPTIONAL_FILE}"
      ;;
  esac
fi
